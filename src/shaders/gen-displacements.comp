#version 450 core

layout(local_size_x = 8, local_size_y = 8) in;

#include "declarations.glsl"


layout(binding = 0) uniform UniformBlock {
    int slot;
} ubo;
layout(binding = 1) uniform texture2DArray heightmaps;
layout(binding = 2) uniform texture2DArray base_heightmaps;
layout(binding = 3) uniform texture2DArray ellipsoid;
layout(binding = 4) uniform texture2DArray waterlevel;
layout(rgba32f, binding = 5) writeonly uniform image2DArray displacements;
layout(set = 0, binding = 6, std140) readonly buffer Nodes {
	Node nodes[];
};
layout(set = 0, binding = 7) uniform sampler linear;

const float A = 6378137.0;
const float B = 6356752.314245;

void main() {
    if (max(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) > DISPLACEMENTS_INNER_RESOLUTION)
        return;

    Node node = nodes[ubo.slot];
    vec2 texcoord = vec2(gl_GlobalInvocationID) / float(DISPLACEMENTS_INNER_RESOLUTION);

    float height;
    if (node.layers[HEIGHTMAPS_LAYER].slot >= 0) {
        height = extract_height(textureLod(sampler2DArray(heightmaps, linear),
            layer_texcoord(node.layers[HEIGHTMAPS_LAYER], texcoord), 0).x);
    } else {
        height = extract_height(textureLod(sampler2DArray(base_heightmaps, linear),
            layer_texcoord(node.layers[BASE_HEIGHTMAPS_LAYER], texcoord), 0).x);
    }

    float waterlevel_value = 0;
    if (node.layers[WATERLEVEL_LAYER].slot >= 0) {
        waterlevel_value = extract_height(textureLod(sampler2DArray(waterlevel, linear),
            layer_texcoord(node.layers[WATERLEVEL_LAYER], texcoord), 0).x);
    }
    height = max(height, waterlevel_value);

    vec3 ellipsoid_point = texelFetch(ellipsoid, ivec3(gl_GlobalInvocationID.xy, ubo.slot), 0).xyz;
    vec3 position = ellipsoid_point + node.node_center;

    float latitude = atan(position.z * A*A / (B*B), length(position.xy));
    float longitude = atan(position.y, position.x);
    vec3 normal = vec3(
        cos(latitude) * cos(longitude),
        cos(latitude) * sin(longitude),
        sin(latitude)
    );

    ivec3 pos = ivec3(gl_GlobalInvocationID.xy, ubo.slot);
    imageStore(displacements, pos, vec4(ellipsoid_point + normal * height, 0.0));
}