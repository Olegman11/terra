#line 2

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform UniformBlock {
	ivec2 origin;
	vec2 world_origin;
	float spacing;
	int heightmaps_slot;
	int normals_slot;
} ubo;

layout(r32f, binding = 1) uniform image2DArray heightmaps;
layout(rg8, binding = 2) uniform image2DArray normals;
layout(rgba8, binding = 3) uniform image2DArray albedo;

layout(set = 0, binding = 4) uniform texture2D noise;
layout(set = 0, binding = 5) uniform sampler linear_wrap;

void main() {
	ivec3 in_pos = ivec3(gl_GlobalInvocationID.xy + ubo.origin, ubo.heightmaps_slot);
	ivec3 out_pos = ivec3(gl_GlobalInvocationID.xy, ubo.normals_slot);

	vec2 world_pos = vec2(ubo.world_origin) + vec2(gl_GlobalInvocationID.xy) * ubo.spacing;

	float h00 = imageLoad(heightmaps, in_pos).x;
	float h10 = imageLoad(heightmaps, in_pos + ivec3(1,0,0)).x;
	float h01 = imageLoad(heightmaps, in_pos + ivec3(0,1,0)).x;
	float h11 = imageLoad(heightmaps, in_pos + ivec3(1,1,0)).x;

	vec3 normal = vec3(h10 + h11 - h00 - h01,
					   2.0 * ubo.spacing,
					   -1.0 * (h01 + h11 - h00 - h10));

	normal = normalize(normal);

	vec4 albedo_roughness = vec4(.011, .03, .003, 0.7);

	float rock = 1-smoothstep(0.80, .95, normal.y);
	albedo_roughness.rgb = mix(albedo_roughness.rgb, vec3(0.02), rock);

	imageStore(normals, out_pos, vec4(normal.x*0.5+0.5, normal.z*0.5+0.5,0.0, 0.0));
	imageStore(albedo, out_pos, albedo_roughness);
}
