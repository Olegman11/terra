#line 2

layout(local_size_x = 4, local_size_y = 4) in;

layout(binding = 0) uniform UniformBlock {
	dvec4 cspace_origin;
	dvec4 cspace_dx;
	dvec4 cspace_dy;
	ivec2 heightmaps_origin;
	ivec2 parent_origin;
	int heightmaps_slot;
	int normals_slot;
	int albedo_slot;
	int parent_slot;
	float spacing;
	int padding;
} ubo;

layout(r32f, binding = 1) uniform image2DArray heightmaps;
layout(rg32ui, binding = 2) uniform uimage2D bc5_staging;
layout(rgba8, binding = 3) uniform image2DArray albedo;

layout(set = 0, binding = 4) uniform texture2D noise;
layout(set = 0, binding = 5) uniform sampler linear_wrap;

shared vec2 group_normals[16];

void main() {
	ivec3 in_pos = ivec3(gl_GlobalInvocationID.xy + ubo.heightmaps_origin, ubo.heightmaps_slot);
	ivec2 out_pos = ivec2(gl_GlobalInvocationID.xy);

	dvec3 cspace_pos = ubo.cspace_origin.xyz
		+ gl_GlobalInvocationID.x * ubo.cspace_dx.xyz
		+ gl_GlobalInvocationID.y * ubo.cspace_dy.xyz;

	float h00 = max(0, imageLoad(heightmaps, in_pos).x);
	float h10 = max(0, imageLoad(heightmaps, in_pos + ivec3(1,0,0)).x);
	float h01 = max(0, imageLoad(heightmaps, in_pos + ivec3(0,1,0)).x);
	float h11 = max(0, imageLoad(heightmaps, in_pos + ivec3(1,1,0)).x);

	vec3 normal = vec3(h10 + h11 - h00 - h01,
					   2.0 * ubo.spacing,
					   -1.0 * (h01 + h11 - h00 - h10));

	normal = normalize(normal);

	vec4 noise_value = vec4(0.5);//texture(sampler2D(noise, linear_wrap), vec2(world_pos.xy*.0001));


	vec4 albedo_roughness = vec4(.011, .03, .003, 0.7);
	float rock = 1-smoothstep(0.80, .95, normal.y);

	float grass_fraction = mix(0, .3, smoothstep(0.95, 1, normal.y));
	float grass = step(grass_fraction, dot(noise_value, vec4(.25)));
	albedo_roughness.rgb = mix(vec3(.03,.02,0), vec3(0,.1,0), grass);

	albedo_roughness.rgb = mix(albedo_roughness.rgb, vec3(0.02), rock);

	if (ubo.parent_slot >= 0) {
		vec2 nv = guassian_random(gl_GlobalInvocationID.xy);
		ivec2 offset = clamp(ivec2(round(nv)), ivec2(-1), ivec2(1));
		albedo_roughness = imageLoad(albedo, ivec3(ubo.parent_origin + (out_pos+offset)/2, ubo.parent_slot));
	}

	// if (ubo.normals_slot >= 0)
	// 	imageStore(normals, ivec3(out_pos, ubo.normals_slot), vec4(normal.x*0.5+0.5, normal.z*0.5+0.5,0.0, 0.0));
	if (ubo.albedo_slot >= 0)
		imageStore(albedo, ivec3(out_pos, ubo.albedo_slot), albedo_roughness);

	if (gl_LocalInvocationID == uvec3(0)) {
		for (int i = 0; i < 16; i++)
			group_normals[i] = vec2(0);
	}

	group_normals[gl_LocalInvocationID.x + 4*gl_LocalInvocationID.y] =
		vec2(normal.x*0.5+0.5, normal.z*0.5+0.5);
	memoryBarrierShared();
	if (gl_LocalInvocationID == uvec3(0)) {
		vec2 nmin = group_normals[0];
		vec2 nmax = group_normals[0];
		for (int i = 1; i < 16; i++) {
			nmin = min(nmin, group_normals[i]);
			nmax = max(nmax, group_normals[i]);
		}

		nmin = clamp(nmin, vec2(0), vec2(250.0/255.0));
		nmax = clamp(nmax, vec2(nmin+2.0/255.0), vec2(1));

		uvec2 weights[16];
		uint permute[8] = uint[](1, 7, 6, 5, 4, 3, 2, 0);
		for (int i = 0; i < 16; i++) {
			weights[i] = uvec2(7.0 * (group_normals[i] - nmin) / (nmax - nmin));
			weights[i] = uvec2(permute[weights[i].x], permute[weights[i].y]);
		}

		uvec2 qnmin = uvec2(nmin * 255.0);
		uvec2 qnmax = uvec2(nmax * 255.0);

		uvec4 bc5_output = uvec4(0);
		bc5_output.xz = qnmax | qnmin << 8
			| weights[0] << 16 | weights[1] << 19 | weights[2] << 22
			| weights[3] << 25 | weights[4] << 28 | (weights[5]&1) << 31;
		bc5_output.yw = ((weights[5]&6) >> 1) | weights[6] << 2 | weights[7] << 5 | weights[8] << 8
			| weights[9] << 11 | weights[10] << 14 | weights[11] << 17 | weights[12] << 20
			| weights[13] << 23 | weights[14] << 26 | weights[15] << 29;

		if (qnmin.x >= qnmax.x)
			bc5_output.xy = uvec2(qnmin.x, 0);
		if (qnmin.y >= qnmax.y)
			bc5_output.zw = uvec2(qnmin.y, 0);

		imageStore(bc5_staging, ivec2(gl_WorkGroupID.xy), bc5_output);
	}
}
