#line 2

layout(local_size_x = 8, local_size_y = 8) in;

struct Indirect {
    uint vertex_count;
    uint instance_count;
    uint base_vertex;
    uint base_instance;
};
struct Entry {
    vec4 position_u;
    vec4 albedo_v;
};

layout(binding = 0) uniform UniformBlock {
	uint input_slot;
    uint output_slot;
} ubo;
layout(std430, binding = 1) buffer StorageDataBlock {
    Entry entries[][128*128];
} grass_storage;
coherent layout(std430, binding = 2) buffer IndirectBlock {
    Indirect indirect[];
} grass_indirect;

layout(set = 0, binding = 3) uniform sampler linear;
layout(rgba32f, set = 0, binding = 4) readonly uniform image2DArray displacements;
layout(set = 0, binding = 5) uniform texture2DArray normals;
layout(set = 0, binding = 6) uniform texture2DArray albedo;

vec3 extract_normal(vec2 n) {
	n = n * 2.0 - vec2(1.0);
	float y = sqrt(max(1.0 - dot(n, n),0));
	return normalize(vec3(n.x, y, n.y));
}

#define BILINEAR(r, img, v) { \
    vec4 i00 = imageLoad(img, ivec3(v.xy * imageSize(img).xy, v.z)); \
    vec4 i10 = imageLoad(img, ivec3(v.xy * imageSize(img).xy, v.z)+ivec3(1,0,0)); \
    vec4 i01 = imageLoad(img, ivec3(v.xy * imageSize(img).xy, v.z)+ivec3(0,1,0)); \
    vec4 i11 = imageLoad(img, ivec3(v.xy * imageSize(img).xy, v.z)+ivec3(1,1,0)); \
    r = mix(mix(i00, i10, fract(v.x)), mix(i01, i11, fract(v.x)), fract(v.y)); \
}

void main() {
    if (gl_GlobalInvocationID.xy == ivec2(0)) {
       grass_indirect.indirect[ubo.output_slot].instance_count = 1;
    }

    vec2 r = vec2(random(uvec3(gl_GlobalInvocationID.xy, 0)), random(uvec3(gl_GlobalInvocationID.xy, 1)));
    vec2 texcoord = (vec2(gl_GlobalInvocationID.xy) + r + 1.0) / 130.0;

    vec2 material_texcoord = (512.0 * texcoord + 2.0) / 516.0;
    vec3 normal = extract_normal(texture(sampler2DArray(normals, linear), vec3(material_texcoord, ubo.input_slot)).xy);
    vec3 albedo_value = texture(sampler2DArray(albedo, linear), vec3(material_texcoord, ubo.input_slot)).xyz;

    if (normal.y < 0.95)
        return;

    vec3 r3 = vec3(random(uvec3(gl_GlobalInvocationID.xy, 2)), 
                   random(uvec3(gl_GlobalInvocationID.xy, 3)), 
                   random(uvec3(gl_GlobalInvocationID.xy, 4)));

    uint entry = atomicAdd(grass_indirect.indirect[ubo.output_slot].vertex_count, 6) / 6;

    vec4 position;
    BILINEAR(position, displacements, vec3(texcoord, ubo.input_slot))

    grass_storage.entries[ubo.output_slot][entry].position_u = vec4(position.xyz, material_texcoord.x);
    grass_storage.entries[ubo.output_slot][entry].albedo_v = vec4(albedo_value + (r3 - 0.5) * .05, material_texcoord.y);
}