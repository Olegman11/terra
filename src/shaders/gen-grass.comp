#version 450 core
#include "declarations.glsl"
#include "hash.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

struct Entry {
    vec3 position;
    float angle;
    vec3 albedo;
    float slant;
    vec2 texcoord;
    vec2 _padding1;
    vec4 _padding2;
};

layout(binding = 0) uniform UniformBlock {
    GenMeshUniforms ubo;
};
layout(std430, binding = 1) buffer StorageDataBlock {
    Entry entries[][32*32];
} grass_storage;
coherent layout(std430, binding = 2) buffer IndirectBlock {
    Indirect indirect[];
} mesh_indirect;

layout(set = 0, binding = 3) uniform sampler linear;
layout(set = 0, binding = 4) uniform texture2DArray displacements;
layout(set = 0, binding = 5) uniform texture2DArray normals;
layout(set = 0, binding = 6) uniform texture2DArray albedo;
layout(set = 0, binding = 7) uniform texture2DArray grass_canopy;
layout(set = 0, binding = 8, std430) readonly buffer Nodes {
	Node nodes[];
};

vec3 extract_normal(vec2 n) {
	n = n * 2.0 - vec2(1.0);
	float y = sqrt(max(1.0 - dot(n, n),0));
	return normalize(vec3(n.x, y, n.y));
}

vec3 layer_to_texcoord(uint layer) {
	Node node = nodes[ubo.slot];
    vec2 texcoord = (vec2(gl_GlobalInvocationID.xy) /*+ r*/) / 128.0;
	return vec3(node.layer_origins[layer] + texcoord * node.layer_ratios[layer], node.layer_slots[layer]);
}

#define BILINEAR(r, img, v) { \
    vec2 f = fract(v.xy * textureSize(img, 0).xy); \
    vec4 i00 = texelFetch(img, ivec3(v.xy * textureSize(img,0).xy, v.z), 0); \
    vec4 i10 = texelFetch(img, ivec3(v.xy * textureSize(img,0).xy, v.z)+ivec3(1,0,0), 0); \
    vec4 i01 = texelFetch(img, ivec3(v.xy * textureSize(img,0).xy, v.z)+ivec3(0,1,0), 0); \
    vec4 i11 = texelFetch(img, ivec3(v.xy * textureSize(img,0).xy, v.z)+ivec3(1,1,0), 0); \
    r = mix(mix(i00, i10, f.x), mix(i01, i11, f.y), f.y); \
}

void main() {
    Node node = nodes[ubo.slot];

    uvec2 index = gl_GlobalInvocationID.xy % 32;
    uint entry = 4 * (gl_GlobalInvocationID.y / 32) + (gl_GlobalInvocationID.x / 32);

    if (index == ivec2(0)) {
       mesh_indirect.indirect[ubo.mesh_base_entry + entry].instance_count = 1;
    }

    vec2 r = vec2(random(uvec3(index, 0)), random(uvec3(index, 1)));

    vec3 normal = extract_normal(texture(sampler2DArray(normals, linear), layer_to_texcoord(NORMALS_LAYER)).xy);
    vec3 albedo_value = texture(sampler2DArray(albedo, linear), layer_to_texcoord(ALBEDO_LAYER)).xyz;
    vec4 canopy = texture(sampler2DArray(grass_canopy, linear), layer_to_texcoord(GRASS_CANOPY_LAYER));

    // if (canopy.a < .8+.2*r.x)
    //     return;

    if (normal.y < 0.95)
        return;

    vec3 r3 = vec3(random(uvec3(index, 2)), 
                   random(uvec3(index, 3)), 
                   random(uvec3(index, 4)));

    float angle = random(uvec3(index, 5)) * 2.0 * 3.14159265;

    vec4 position;
    BILINEAR(position, displacements, layer_to_texcoord(DISPLACEMENTS_LAYER))

    uint i = atomicAdd(mesh_indirect.indirect[ubo.mesh_base_entry + entry].vertex_count, 15) / 15;
    grass_storage.entries[ubo.storage_base_entry + entry][i].texcoord = layer_to_texcoord(NORMALS_LAYER).xy;
    grass_storage.entries[ubo.storage_base_entry + entry][i].position = position.xyz;
    grass_storage.entries[ubo.storage_base_entry + entry][i].albedo = ((canopy.rgb - 0.5) * 0.025 + albedo_value + vec3(-.0)) * mix(vec3(.5), vec3(1.5), r3);
    grass_storage.entries[ubo.storage_base_entry + entry][i].angle = angle;
    grass_storage.entries[ubo.storage_base_entry + entry][i].slant = r.y;
}