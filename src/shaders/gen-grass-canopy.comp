#version 450 core
#include "declarations.glsl"
#include "hash.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, std140) readonly buffer Nodes {
	Node nodes[];
};
layout(binding = 1) uniform UniformBlock {
	int slot;
} ubo;

layout(binding = 2) uniform sampler linear;
layout(binding = 3) uniform sampler linear_wrap;
layout(binding = 4) uniform texture2DArray normals;
layout(binding = 5) uniform texture2D noise;
layout(binding = 6) uniform texture2DArray heightmaps;
layout(binding = 7) uniform texture2DArray waterlevel;

layout(rgba8, binding = 8) writeonly uniform image2DArray grass_canopy;

vec3 extract_normal(vec2 n) {
	n = n * 2.0 - vec2(1.0);
	float y = sqrt(max(1.0 - dot(n, n),0));
	return normalize(vec3(n.x, y, n.y));
}

void main() {
	Node node = nodes[ubo.slot];

	vec4 value = vec4(0);

	vec3 normal = extract_normal(texelFetch(normals, ivec3(gl_GlobalInvocationID.xy, ubo.slot), 0).xy);

	vec2 texcoord = vec2(gl_GlobalInvocationID.xy-1.5) / vec2(512);
	float height = extract_height(textureLod(sampler2DArray(heightmaps, linear), layer_texcoord(node.layers[HEIGHTMAPS_LAYER], texcoord), 0).x);
    float water_surface = extract_height(textureLod(sampler2DArray(waterlevel, linear), layer_texcoord(node.layers[WATERLEVEL_LAYER], texcoord),0).x);

    vec3 r3 = vec3(random(uvec3(gl_GlobalInvocationID.xy, 2)),
                   random(uvec3(gl_GlobalInvocationID.xy, 3)),
                   random(uvec3(gl_GlobalInvocationID.xy, 4)));

	if(normal.y > 0.97 && height > water_surface + r3.x*.1 + 2.1)
		value = vec4(r3 * vec3(.1,.5,.2) + vec3(0,.2,0), 1);

    imageStore(grass_canopy, ivec3(gl_GlobalInvocationID.xy, ubo.slot - GRASS_CANOPY_BASE_SLOT), value);
}
