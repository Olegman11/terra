#line 2

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform UniformBlock {
//	ivec2 normals_origin;
	int normals_slot;
	int output_slot;
} ubo;

layout(set = 0, binding = 1) uniform sampler linear;
layout(set = 0, binding = 2) uniform sampler linear_wrap;
layout(set = 0, binding = 3) uniform texture2DArray normals;
layout(set = 0, binding = 4) uniform texture2D noise;

layout(rgba8, binding = 5) writeonly uniform image2DArray grass_canopy;

vec3 extract_normal(vec2 n) {
	n = n * 2.0 - vec2(1.0);
	float y = sqrt(max(1.0 - dot(n, n),0));
	return normalize(vec3(n.x, y, n.y));
}

void main() {
	vec4 value = vec4(0);

	vec3 normal = extract_normal(texelFetch(normals, ivec3(gl_GlobalInvocationID.xy, ubo.normals_slot), 0).xy);
	
    vec3 r3 = vec3(random(uvec3(gl_GlobalInvocationID.xy, 2)), 
                   random(uvec3(gl_GlobalInvocationID.xy, 3)), 
                   random(uvec3(gl_GlobalInvocationID.xy, 4)));

	if(normal.y > 0.97)
		value = vec4(r3,1);

    imageStore(grass_canopy, ivec3(gl_GlobalInvocationID.xy, ubo.output_slot), value);
}
