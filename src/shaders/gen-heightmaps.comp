#line 2

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform UniformBlock {
	vec2 position;
    ivec2 origin;
	float spacing;
	int in_slot;
	int out_slot;
} ubo;

layout(r32f, binding = 1) uniform image2DArray heightmaps;

layout(set = 0, binding = 2) uniform sampler linear;
layout(set = 0, binding = 3) uniform sampler linear_wrap;
layout(set = 0, binding = 4) uniform texture2D noise;

// See: https://stackoverflow.com/questions/13501081/efficient-bicubic-filtering-code-in-glsl
vec4 cubic(float v)
{
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w);
}

// // See: https://groups.google.com/forum/#!topic/comp.graphics.api.opengl/kqrujgJfTxo
// float bicubic(vec2 texcoord, vec2 texscale)
// {
//     float fx = fract(texcoord.x);
//     float fy = fract(texcoord.y);
//     texcoord.x -= fx;
//     texcoord.y -= fy;

//     vec4 xcubic = cubic(fx);
//     vec4 ycubic = cubic(fy);

//     vec4 c = vec4(texcoord.x - 0.5, texcoord.x + 1.5, texcoord.y - 0.5, texcoord.y + 1.5);
//     vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);
//     vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;

//     float sample0 = texture(sampler2DArray(heightmaps, linear),
// 							vec3(vec2(offset.x, offset.z) * texscale), ubo.in_slot).x;
//     float sample1 = texture(sampler2DArray(heightmaps, linear),
// 							vec3(vec2(offset.y, offset.z) * texscale), ubo.in_slot).x;
//     float sample2 = texture(sampler2DArray(heightmaps, linear),
// 							vec3(vec2(offset.x, offset.w) * texscale), ubo.in_slot).x;
//     float sample3 = texture(sampler2DArray(heightmaps, linear),
// 							vec3(vec2(offset.y, offset.w) * texscale), ubo.in_slot).x;

//     float sx = s.x / (s.x + s.y);
//     float sy = s.z / (s.z + s.w);

//     return mix(
//         mix(sample3, sample2, sx),
//         mix(sample1, sample0, sx), sy);
// }

shared vec4 h[10][10];

void main() {
	// vec2 texsize = vec2(imageSize(heightmaps).xy);
	// vec2 texcoord = ubo.texcoord + vec2(gl_GlobalInvocationID.xy) * 0.5 / texsize;
	// float height = bicubic(texcoord * texsize, 1.0 / texsize);

	uint x = gl_LocalInvocationID.x;
	uint y = gl_LocalInvocationID.y;

	// Load parent heights
	if (x < 5 && y < 5) {
		ivec3 origin = ivec3(ubo.origin+gl_WorkGroupID.xy*4, ubo.in_slot);
		ivec3 gpos = origin + ivec3(gl_LocalInvocationID.xy*2-ivec2(2), 0);
		h[x*2][y*2] = imageLoad(heightmaps, gpos);
		h[x*2+1][y*2] = imageLoad(heightmaps, gpos + ivec3(1,0,0));
		h[x*2][y*2+1] = imageLoad(heightmaps, gpos + ivec3(0,1,0));
		h[x*2+1][y*2+1] = imageLoad(heightmaps, gpos + ivec3(1,1,0));
	}
	barrier();

	// Compute slopes
	if (x < 8 && y < 8) {
		h[x+1][y+1].y = (h[x+2][y+1].x - h[x][y+1].x) * 0.5;
		h[x+1][y+1].z = (h[x+1][y+2].x - h[x+1][y].x) * 0.5;
		h[x+1][y+1].w = (h[x+2][y+2].x - h[x][y+1].x - h[x+1][y].x + h[x+1][y+1].x) * 0.5;
	}
	barrier();

	x = x/2 + 1;
	y = y/2 + 1;
	vec2 t = vec2(gl_GlobalInvocationID.xy%2)/2.0;


	mat4 Binv = mat4(1, 0, -3, 2,
					 0, 0, 3, -2,
					 0, 1, -2, 1,
					 0, 0, -1, 1);
	mat4 F = mat4(h[x][y].x,   h[x+1][y].x,   h[x][y].y,   h[x+1][y].y,
				  h[x][y+1].x, h[x+1][y+1].x, h[x][y+1].y, h[x+1][y+1].y,
				  h[x][y].z,   h[x+1][y].z,   h[x][y].w,   h[x+1][y].w,
				  h[x][y+1].z, h[x+1][y+1].z, h[x][y+1].w, h[x+1][y+1].w);
	mat4 M = Binv * F * transpose(Binv);
	vec4 xx = vec4(1, t.x, t.x*t.x, t.x*t.x*t.x);
	vec4 yy = vec4(1, t.y, t.y*t.y, t.y*t.y*t.y);
	vec4 ddx = vec4(0, 1, 2*t.x, 3*t.x*t.x);
	vec4 ddy = vec4(0, 1, 2*t.y, 3*t.y*t.y);
	float height = dot(xx * M, yy);
	float dx = dot(ddx * M, yy) / ubo.spacing;
	float dy = dot(xx * M, ddy) / ubo.spacing;
	// float dxy = dot(ddx * M, ddy) / (ubo.spacing*ubo.spacing);
	float slope = length(vec2(dx, dy));

	vec2 position = ubo.position + vec2(gl_GlobalInvocationID.xy) * ubo.spacing;
	vec2 n = guassian_random(position);

	height += n.x * ubo.spacing * mix(0.025, .08, smoothstep(0.4, 0.6, slope));

	imageStore(heightmaps, ivec3(gl_GlobalInvocationID.xy, ubo.out_slot), vec4(height, 0, 0, 0));
}
