#version 450 core
#include "declarations.glsl"
#include "hash.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform UniformBlock {
	int slot;
} ubo;

layout(binding = 1) uniform texture2DArray base_heightmaps;
layout(r16, binding = 2) writeonly uniform image2DArray heightmaps;

layout(set = 0, binding = 3, std430) readonly buffer NodeSlots {
	Node nodes[];
};

const uint SIZE = 11;

shared uint base_heights_level;
shared ivec2 base_heights_origin;
shared float base_heights[SIZE][SIZE];
shared float heights_working[SIZE][SIZE];

vec2 interpolate(uint x, uint y, vec2 t) {
	const mat4 M = transpose(mat4(
		-.5, 1.5, -1.5, .5,
		1, -2.5, 2, -.5,
		-.5, 0, .5, 0,
		0, 1, 0, 0
	));
	// const mat4 M = transpose(mat4(
	// 	0, 0, 0, 0,
	// 	0, 0, 0, 0,
	// 	0, -1, 1, 0,
	// 	0, 1, 0, 0
	// ));

	vec4 xweights = vec4(t.x*t.x*t.x, t.x*t.x, t.x, 1) * M;
	vec4 yweights = vec4(t.y*t.y*t.y, t.y*t.y, t.y, 1) * M;

	vec4 dxweights = vec4(3*t.x*t.x, 2*t.x, 1, 0) * M;
	vec4 dyweights = vec4(3*t.y*t.y, 2*t.y, 1, 0) * M;

	float dx = 0;
	float dy = 0;
	float height = 0;
	for (uint i = 0; i <= 3; i++) {
		for (uint j = 0; j <= 3; j++) {
			float h = base_heights[x+i-1][y+j-1];
			height += h * xweights[i] * yweights[j];
			dx += h * dxweights[i] * yweights[j];
			dy += h * xweights[i] * dyweights[j];
		}
	}
	return vec2(height, length(vec2(dx, dy)));
}

float compute_height(ivec2 v) {
	vec2 t = vec2(v % ivec2(2)) / 2.0;
	int x = v.x / 2 - base_heights_origin.x;
	int y = v.y / 2 - base_heights_origin.y;

	vec2 height_slope = interpolate(uint(x), uint(y), t);

	float spacing = 19545.9832 / float(1 << (base_heights_level+1));

	float n = random(uvec2(v)) - 0.5;
	float delta = n * spacing * mix(0.1, 0.2, smoothstep(0.4, 0.5, height_slope.y / spacing)) * min(abs(height_slope.x*0.5), 1);

	// Make sure seams match.
	if (min(v.x, v.y) < 0 || max(v.x, v.y) >= HEIGHTMAP_INNER_RESOLUTION << (base_heights_level+1))
		delta = 0;

	return height_slope.x + delta;
}

void upscale_heights(ivec2 base) {
	uint index = gl_LocalInvocationID.x + gl_LocalInvocationID.y * 16;
	for (uint i = index; i < SIZE*SIZE; i += 16*16) {
		uint x = i % SIZE;
		uint y = i / SIZE;

		heights_working[x][y] = compute_height(base + ivec2(x, y));
	}
	barrier();

	for (uint i = index; i < SIZE*SIZE; i += 16*16) {
		uint x = i % SIZE;
		uint y = i / SIZE;
		base_heights[x][y] = heights_working[x][y];
	}
	if (index == 0) {
		base_heights_origin = base;
		base_heights_level += 1;
	}
	barrier();
}

const uint MAX_STREAMED_HEIGHTMAP_LEVEL = 8;

void main() {
	Node node = nodes[ubo.slot];

	int upscale_levels = int(node.level - MAX_BASE_HEIGHTMAP_LEVEL);
	ivec2 workgroup_origin = ivec2(node.coords * HEIGHTMAP_INNER_RESOLUTION + gl_WorkGroupID.xy * 16) - ivec2(HEIGHTMAP_BORDER);
	ivec2 ancestor_origin = ivec2((node.coords >> upscale_levels) * HEIGHTMAP_INNER_RESOLUTION) - ivec2(HEIGHTMAP_BORDER);

	uvec2 max_offset = uvec2((2 << upscale_levels) - 1);
	uvec2 ancestor_coords = (workgroup_origin - max_offset - (ancestor_origin << upscale_levels)) >> upscale_levels;

	// Compute base heights.
	uint index = gl_LocalInvocationID.x * 16 + gl_LocalInvocationID.y;
	if (index == 0) {
		base_heights_level = MAX_BASE_HEIGHTMAP_LEVEL;
		base_heights_origin = ancestor_origin + ivec2(ancestor_coords);
	}
	for (uint i = index; i < SIZE*SIZE; i += 256){
		uvec2 uv = uvec2(i%SIZE, i/SIZE);
		base_heights[uv.x][uv.y] = extract_height(texelFetch(base_heightmaps,
			ivec3(ancestor_coords + uv, node.layer_slots[BASE_HEIGHTMAPS_LAYER]), 0).x);
	}
	barrier();

	// Compute upscaled heights.
	for (int i = upscale_levels - 1; i > 0; i--) {
		upscale_heights((workgroup_origin - ((1 << i) - 1)) >> i);
	}

	// Compute and write height.
	float height = compute_height(workgroup_origin + ivec2(gl_LocalInvocationID.xy));
	float encoded_height = (height + 1024.0) * (1 / 16384.0);
	imageStore(heightmaps, ivec3(gl_GlobalInvocationID.xy, node.layer_slots[HEIGHTMAPS_LAYER]), 
		vec4(encoded_height, 0, 0, 0));
}
