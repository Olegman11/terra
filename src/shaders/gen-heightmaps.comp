#version 450 core
#include "declarations.glsl"
#include "hash.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0) uniform UniformBlock {
	int slot;
} ubo;

layout(binding = 1) uniform texture2D heightmaps_in;
layout(r16, binding = 2) writeonly uniform image2D heightmaps_out;

layout(set = 0, binding = 3, std430) /*readonly*/ buffer NodeSlots {
	Node nodes[];
};

shared vec4 h[8][8];

void main() {
	Node node = nodes[ubo.slot];
	uint x = gl_LocalInvocationID.x;
	uint y = gl_LocalInvocationID.y;

	int level_resolution = int(HEIGHTMAP_INNER_RESOLUTION << node.level);
	float spacing = 19545.9832 / float(1 << node.level);
	uvec2 parent_offset = node.coords & uvec2(1);
	uvec2 parent_origin = parent_offset * HEIGHTMAP_INNER_RESOLUTION / 2 + HEIGHTMAP_BORDER / 2;
	uvec2 base_position = (node.coords - (1 << node.level)/2) * HEIGHTMAP_INNER_RESOLUTION - HEIGHTMAP_BORDER;

	// Load parent heights
	ivec2 origin = ivec2(parent_origin + gl_WorkGroupID.xy * 4) - ivec2(2);
	h[x][y].x = extract_height(texelFetch(heightmaps_in, min(origin.xy + ivec2(x,y), ivec2(HEIGHTMAP_RESOLUTION)), 0).x);
	barrier();

	// Compute slopes
	if (x < 6 && y < 6) {
		h[x+1][y+1].y = (h[x+2][y+1].x - h[x][y+1].x) * 0.5;
		h[x+1][y+1].z = (h[x+1][y+2].x - h[x+1][y].x) * 0.5;
		h[x+1][y+1].w = (h[x+2][y+2].x - h[x][y+1].x - h[x+1][y].x + h[x+1][y+1].x) * 0.5;
	}
	barrier();

	if (x >= HEIGHTMAP_RESOLUTION && y >= HEIGHTMAP_RESOLUTION)
		return;

	// Bicubic Interpolation
	x = x/2 + 2;
	y = y/2 + 2;
	vec2 t = vec2(gl_GlobalInvocationID.xy%uvec2(2))/2.0;


	mat4 Binv = mat4(1, 0, -3, 2,
					 0, 0, 3, -2,
					 0, 1, -2, 1,
					 0, 0, -1, 1);
	mat4 F = mat4(h[x][y].x,   h[x+1][y].x,   h[x][y].y,   h[x+1][y].y,
				  h[x][y+1].x, h[x+1][y+1].x, h[x][y+1].y, h[x+1][y+1].y,
				  h[x][y].z,   h[x+1][y].z,   h[x][y].w,   h[x+1][y].w,
				  h[x][y+1].z, h[x+1][y+1].z, h[x][y+1].w, h[x+1][y+1].w);
	mat4 M = Binv * F * transpose(Binv);
	vec4 xx = vec4(1, t.x, t.x*t.x, t.x*t.x*t.x);
	vec4 yy = vec4(1, t.y, t.y*t.y, t.y*t.y*t.y);
	vec4 ddx = vec4(0, 1, 2*t.x, 3*t.x*t.x);
	vec4 ddy = vec4(0, 1, 2*t.y, 3*t.y*t.y);
	float height = dot(xx * M, yy);
	float dx = dot(ddx * M, yy) / spacing;
	float dy = dot(xx * M, ddy) / spacing;
	// float dxy = dot(ddx * M, ddy) / (spacing*spacing);
	float slope = length(vec2(dx, dy));


	// Calculate position
	ivec3 position;
	ivec2 position2 = ivec2(gl_GlobalInvocationID.xy)+ivec2(base_position);
	if (node.face == 0) position = ivec3( level_resolution/2,   position2.x,             -position2.y);
	if (node.face == 1) position = ivec3(-level_resolution/2,  -position2.x,             -position2.y);
	if (node.face == 2) position = ivec3( position2.x,              level_resolution/2,   position2.y);
	if (node.face == 3) position = ivec3(-position2.x,             -level_resolution/2,   position2.y);
	if (node.face == 4) position = ivec3( position2.x,             -position2.y,              level_resolution/2);
	if (node.face == 5) position = ivec3(-position2.x,             -position2.y,             -level_resolution/2);

	// If we are on the edge of a tile, then make sure our slope matches what is on the other side
	// of the seam (by setting both to zero).
	if (any(greaterThanEqual(abs(position2), ivec2(level_resolution/2)))) {
		slope = 0;
	}

	// Apply noise
	//float n = pow(random(uvec3(position+level_resolution/2)), 2);
	float n = random(uvec3(position+level_resolution/2)) - 0.5;
	height += n * spacing * mix(0.1, 0.2, smoothstep(0.4, 0.5, slope)) * min(abs(height*0.5), 1);

	float encoded_height = (height + 1024.0) * (1 / 16384.0);

	// Write output
	imageStore(heightmaps_out, ivec2(gl_GlobalInvocationID.xy), vec4(encoded_height, 0, 0, 0));
}
