#line 2

layout(local_size_x = 4, local_size_y = 4) in;

layout(binding = 0) uniform UniformBlock {
	ivec2 heightmaps_origin;
	int heightmaps_slot;
	int normals_slot;
	float spacing;
	vec3 padding;
} ubo;

layout(binding = 1) uniform texture2DArray heightmaps;
layout(rgba32ui, binding = 2) uniform uimage2D bc5_staging;

shared vec2 group_normals[16];

void main() {
	ivec3 in_pos = ivec3(gl_GlobalInvocationID.xy + ubo.heightmaps_origin, ubo.heightmaps_slot);
	ivec2 out_pos = ivec2(gl_GlobalInvocationID.xy);

	float h00 = max(0, texelFetch(heightmaps, in_pos, 0).x);
	float h10 = max(0, texelFetch(heightmaps, in_pos + ivec3(1,0,0), 0).x);
	float h01 = max(0, texelFetch(heightmaps, in_pos + ivec3(0,1,0), 0).x);
	float h11 = max(0, texelFetch(heightmaps, in_pos + ivec3(1,1,0), 0).x);

	vec3 normal = vec3(h10 + h11 - h00 - h01,
					   2.0 * ubo.spacing,
					   -1.0 * (h01 + h11 - h00 - h10));

	normal = normalize(normal);

	if (gl_LocalInvocationID == uvec3(0)) {
		for (int i = 0; i < 16; i++)
			group_normals[i] = vec2(0);
	}

	barrier();

	group_normals[gl_LocalInvocationID.x + 4*gl_LocalInvocationID.y] =
		vec2(normal.x*0.5+0.5, normal.z*0.5+0.5);

	barrier();

	if (gl_LocalInvocationID == uvec3(0)) {
		vec2 nmin = group_normals[0];
		vec2 nmax = group_normals[0];
		for (int i = 1; i < 16; i++) {
			nmin = min(nmin, group_normals[i]);
			nmax = max(nmax, group_normals[i]);
		}

		uvec2 qnmin = clamp(uvec2(floor(nmin * 255.0)), uvec2(0), uvec2(254));
		uvec2 qnmax = clamp(uvec2(ceil(nmax * 255.0)), qnmin+uvec2(1), uvec2(255));

		nmin = vec2(qnmin) / 255.0;
		nmax = vec2(qnmax) / 255.0;

		uvec2 weights[16];
		uint permute[8] = uint[](1, 7, 6, 5, 4, 3, 2, 0);
		for (int i = 0; i < 16; i++) {
			weights[i] = uvec2(7.0 * (group_normals[i] - nmin) / (nmax - nmin));
			weights[i] = uvec2(permute[weights[i].x], permute[weights[i].y]);
		}

		uvec4 bc5_output = uvec4(0);
		bc5_output.xz = qnmax | qnmin << 8
			| weights[0] << 16 | weights[1] << 19 | weights[2] << 22
			| weights[3] << 25 | weights[4] << 28 | (weights[5]&1) << 31;
		bc5_output.yw = ((weights[5]&6) >> 1) | weights[6] << 2 | weights[7] << 5 | weights[8] << 8
			| weights[9] << 11 | weights[10] << 14 | weights[11] << 17 | weights[12] << 20
			| weights[13] << 23 | weights[14] << 26 | weights[15] << 29;

		imageStore(bc5_staging, ivec2(gl_WorkGroupID.xy), bc5_output);
	}
}
