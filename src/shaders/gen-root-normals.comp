#version 450 core
#include "declarations.glsl"
#include "hash.glsl"

layout(local_size_x = 4, local_size_y = 4) in;

layout(binding = 0) uniform UniformBlock {
	int slot;
} ubo;

layout(binding = 1) uniform utexture2DArray heightmaps;
layout(rg8, binding = 2) writeonly uniform image2DArray normals;

layout(set = 0, binding = 3, std430) /*readonly*/ buffer NodeSlots {
	Node nodes[];
};

shared vec2 group_normals[16];

const uint HEIGHTMAP_BORDER = 4;
const uint NORMALS_BORDER = 2;

void main() {
	Node node = nodes[ubo.slot];
	float spacing = 19545.9832 / float(1 << node.level);

	ivec3 in_pos = ivec3(gl_GlobalInvocationID.xy + ivec2(HEIGHTMAP_BORDER - NORMALS_BORDER), ubo.slot);
	ivec2 out_pos = ivec2(gl_GlobalInvocationID.xy);

	float h00 = extract_height_above_water(texelFetch(heightmaps, in_pos, 0).x);
	float h10 = extract_height_above_water(texelFetch(heightmaps, in_pos + ivec3(1,0,0), 0).x);
	float h01 = extract_height_above_water(texelFetch(heightmaps, in_pos + ivec3(0,1,0), 0).x);
	float h11 = extract_height_above_water(texelFetch(heightmaps, in_pos + ivec3(1,1,0), 0).x);

	vec3 normal = vec3(h10 + h11 - h00 - h01,
					   2.0 * spacing,
					   -1.0 * (h01 + h11 - h00 - h10));

	normal = normalize(normal);

	imageStore(normals, ivec3(out_pos, ubo.slot), vec4(normal.xz*0.5+0.5, 0.0, 0.0));
}
