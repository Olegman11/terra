#line 2

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform UniformBlock {
    vec2 position;
	float base_heights_spacing;
	float spacing;
	int slot;
} ubo;

layout(set = 0, binding = 1) uniform texture2D base_heights;
layout(rgba32f, binding = 2) uniform image2D heights_staging;
layout(rgba32f, binding = 3) uniform image2DArray heights;

layout(set = 0, binding = 4) uniform sampler linear;
layout(set = 0, binding = 5) uniform sampler linear_wrap;
layout(set = 0, binding = 6) uniform texture2D noise;

// See: https://stackoverflow.com/questions/13501081/efficient-bicubic-filtering-code-in-glsl
vec4 cubic(float v)
{
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w);
}

// See: https://groups.google.com/forum/#!topic/comp.graphics.api.opengl/kqrujgJfTxo
vec4 bicubic(vec2 texcoord, vec2 texscale)
{
    float fx = fract(texcoord.x);
    float fy = fract(texcoord.y);
    texcoord.x -= fx;
    texcoord.y -= fy;

    vec4 xcubic = cubic(fx);
    vec4 ycubic = cubic(fy);

    vec4 c = vec4(texcoord.x - 0.5, texcoord.x + 1.5, texcoord.y - 0.5, texcoord.y + 1.5);
    vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);
    vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;

    vec4 sample0 = texture(sampler2D(base_heights, linear), vec2(offset.x, offset.z) * texscale);
    vec4 sample1 = texture(sampler2D(base_heights, linear), vec2(offset.y, offset.z) * texscale);
    vec4 sample2 = texture(sampler2D(base_heights, linear), vec2(offset.x, offset.w) * texscale);
    vec4 sample3 = texture(sampler2D(base_heights, linear), vec2(offset.y, offset.w) * texscale);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
        mix(sample3, sample2, sx),
        mix(sample1, sample0, sx), sy);
}

void main() {
	vec2 position = ubo.position
		+ vec2(gl_GlobalInvocationID.xy) * ubo.spacing;

	vec2 texsize = vec2(textureSize(base_heights, 0));
	vec2 texcoord = vec2(0.5) + position / (texsize * ubo.base_heights_spacing);
	vec4 bh = bicubic(texcoord * texsize, 1.0 / texsize);
	float f = bh.x;
	float dx = bh.y;
	float dy = bh.z;

	float slope = length(vec2(dx, dy));

	float n = 0;
	for(int i = 0; i < 6; i++) {
		float weight = exp2(i) * 0.2;
		float scale = exp2(i) * 32.0;
		n += weight * (texture(sampler2D(noise, linear_wrap), position/scale).x-0.5);
	}
	vec4 out_height = vec4(0.0, f + n * mix(0.15, 1, smoothstep(0.1, 0.6, slope)), 0.0, 0.0);
	if(ubo.slot >= 0) {
		imageStore(heights, ivec3(gl_GlobalInvocationID.xy, ubo.slot), out_height);
	} else {
		imageStore(heights_staging, ivec2(gl_GlobalInvocationID.xy), out_height);
	}
}
