#line 2

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0) uniform UniformBlock {
    vec2 position;
	float base_heights_spacing;
	float spacing;
} ubo;

layout(set = 0, binding = 1) uniform texture2D base_heights;
layout(rgba32f, binding = 2) uniform image2D heights_staging;
layout(rg8, binding = 3) uniform image2D normals_staging;

layout(set = 0, binding = 4) uniform sampler linear;
layout(set = 0, binding = 5) uniform sampler linear_wrap;
layout(set = 0, binding = 6) uniform texture2D noise;

// See: https://stackoverflow.com/questions/13501081/efficient-bicubic-filtering-code-in-glsl
vec4 cubic(float v)
{
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w);
}

// See: https://groups.google.com/forum/#!topic/comp.graphics.api.opengl/kqrujgJfTxo
vec4 bicubic(vec2 texcoord, vec2 texscale)
{
    float fx = fract(texcoord.x);
    float fy = fract(texcoord.y);
    texcoord.x -= fx;
    texcoord.y -= fy;

    vec4 xcubic = cubic(fx);
    vec4 ycubic = cubic(fy);

    vec4 c = vec4(texcoord.x - 0.5, texcoord.x + 1.5, texcoord.y - 0.5, texcoord.y + 1.5);
    vec4 s = vec4(xcubic.x + xcubic.y, xcubic.z + xcubic.w, ycubic.x + ycubic.y, ycubic.z + ycubic.w);
    vec4 offset = c + vec4(xcubic.y, xcubic.w, ycubic.y, ycubic.w) / s;

    vec4 sample0 = texture(sampler2D(base_heights, linear), vec2(offset.x, offset.z) * texscale);
    vec4 sample1 = texture(sampler2D(base_heights, linear), vec2(offset.y, offset.z) * texscale);
    vec4 sample2 = texture(sampler2D(base_heights, linear), vec2(offset.x, offset.w) * texscale);
    vec4 sample3 = texture(sampler2D(base_heights, linear), vec2(offset.y, offset.w) * texscale);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
        mix(sample3, sample2, sx),
        mix(sample1, sample0, sx), sy);
}

void main() {
	vec2 position = ubo.position
		+ vec2(gl_GlobalInvocationID.xy) * ubo.spacing;

	vec2 texsize = vec2(textureSize(base_heights, 0));
	vec2 texcoord = vec2(0.5) + position / (texsize * ubo.base_heights_spacing);
	vec2 t = fract(texcoord * texsize + vec2(0.5));

	//            x=0      |      x=1
	//     +-------+-------+-------+-------+
	//     | f00.w | f00.z | f10.w | f10.z |
	// y=0 +-------+-------+-------+-------+
	//     | f00.x | f00.y | f10.x | f10.y |
	// --- +-------+-------+-------+-------+
	//     | f01.w | f01.z | f11.w | f11.z |
	// y=1 +-------+-------+-------+-------+
	//     | f01.x | f01.y | f11.x | f11.y |
	//     +-------+-------+-------+-------+
	vec4 f00 = textureGatherOffset(sampler2D(base_heights, linear), texcoord, ivec2(-1,-1));
	vec4 f10 = textureGatherOffset(sampler2D(base_heights, linear), texcoord, ivec2(1,-1));
	vec4 f01 = textureGatherOffset(sampler2D(base_heights, linear), texcoord, ivec2(-1,1));
	vec4 f11 = textureGatherOffset(sampler2D(base_heights, linear), texcoord, ivec2(1,1));

	float dx00 = (f10.x - f00.x) * 0.5;
	float dx10 = (f10.y - f00.y) * 0.5;
	float dx01 = (f11.w - f01.w) * 0.5;
	float dx11 = (f11.z - f01.z) * 0.5;
 	float dy00 = (f01.z - f00.z) * 0.5;
	float dy10 = (f11.w - f10.w) * 0.5;
	float dy01 = (f01.y - f00.y) * 0.5;
	float dy11 = (f11.x - f10.x) * 0.5;
	float dxy00 = (f11.w - f00.x - f00.z + f00.y) * 0.0;
	float dxy10 = (f11.z - f00.y - f10.w + f10.x) * 0.0;
	float dxy01 = (f11.x - f01.w - f00.y + f01.z) * 0.0;
	float dxy11 = (f11.y - f01.z - f10.x + f11.w) * 0.0;

	// See: https://www.ece.mcmaster.ca/~xwu/interp_1.pdf
	mat4 Binv = mat4(1, 0, -3, 2,
					 0, 0, 3, -2,
					 0, 1, -2, 1,
					 0, 0, -1, 1);
	mat4 F = mat4(f00.y, f10.x, dx00,   dx10,
				  f01.z, f11.w, dx01,   dx11,
				  dy00,   dy10, dxy00, dxy10,
				  dy01,   dy11, dxy01, dxy11);
	mat4 M = Binv * F * transpose(Binv);

	vec4 x = vec4(1, t.x, t.x*t.x, t.x*t.x*t.x);
	vec4 y = vec4(1, t.y, t.y*t.y, t.y*t.y*t.y);
	vec4 ddx = vec4(0, 1, 2*t.x, 3*t.x*t.x);
	vec4 ddy = vec4(0, 1, 2*t.y, 3*t.y*t.y);

	float f = dot(x * M, y);
	float dx = dot(ddx * M, y) / ubo.base_heights_spacing;
	float dy = dot(x * M, ddy) / ubo.base_heights_spacing;
	float dxy = dot(ddx * M, ddy) / (ubo.base_heights_spacing*ubo.base_heights_spacing);

	vec4 bh = bicubic(texcoord * texsize, 1.0 / texsize);
	f = bh.x;
	dx = bh.y / ubo.base_heights_spacing;
	dy = bh.z / ubo.base_heights_spacing;

	float slope = length(vec2(dx, dy));

	float n = 0;
	for(int i = 0; i < 6; i++) {
		float weight = exp2(i) * 1.5;
		float scale = exp2(i) * 256.0;
		n += weight * (texture(sampler2D(noise, linear_wrap), position/scale).x-0.5);
	}
	vec4 out_height = vec4(0.0, f + n * mix(0.1, 1, smoothstep(0.1, 0.6, slope)), 0.0, 0.0);
	imageStore(heights_staging, ivec2(gl_GlobalInvocationID.xy), out_height);
}
