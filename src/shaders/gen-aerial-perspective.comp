#version 450 core
#include "declarations.glsl"

layout(local_size_x = 17, local_size_y = 17) in;

layout(set = 0, binding = 0, std140) uniform GlobalsBlock {
	Globals globals;
};
layout(set = 0, binding = 1, std430) /*readonly*/ buffer NodeBlock {
    Node nodes[];
};
layout(binding = 2, std430) /*readonly*/ buffer UniformBlock {
	uint node_list[1024];
} ubo;


layout(set = 0, binding = 3) uniform sampler nearest;
layout(set = 0, binding = 4) uniform texture2DArray displacements;
layout(set = 0, binding = 5) uniform texture2D transmittance;
layout(rgba16f, binding = 6) writeonly uniform image2DArray aerial_perspective;

const float planetRadius = 6371000.0;
const float atmosphereRadius = 6371000.0 + 100000.0;

vec2 rsi(vec3 r0, vec3 rd, float sr);
vec3 atmosphere(vec3 r0, vec3 r1, vec3 pSun);
vec3 precomputed_transmittance2(vec3 x, vec3 y);

#include "atmosphere.glsl"

void main() {
	uint slot = ubo.node_list[gl_GlobalInvocationID.z];
	Node node = nodes[slot];

	ivec2 iPosition = ivec2(gl_GlobalInvocationID.xy * 4);
	int displacements_slot = node.layer_slots[DISPLACEMENTS_LAYER];
	vec3 texcoord = vec3(node.layer_origins[DISPLACEMENTS_LAYER] + vec2(iPosition) * node.layer_steps[DISPLACEMENTS_LAYER], displacements_slot); //vec3(0.5 / 65.0 + desc.origin * (64.0 / 65.0), desc.slot) + vec3(vec2(iPosition) / 64.0 * pow(0.5, node.layers[DISPLACEMENTS_LAYER]), 0);
	vec3 position = texture(sampler2DArray(displacements, nearest), texcoord).xyz - nodes[displacements_slot].relative_position;

    vec3 x0 = globals.camera;
	vec3 x1 = x0 + position;
	vec3 r = normalize(position);
	vec2 p = rsi(x0, r, atmosphereRadius);

    vec4 output_value = vec4(0, 0, 0, 1);
	if (p.x < p.y && p.y >= 0) {
	    x0 += r * max(p.x, 0.0);
	    output_value.a = precomputed_transmittance2(x1, x0).b;
	    output_value.rgb = atmosphere(x0, x1, globals.sun_direction);
	}
    output_value *= vec4(1.0 / 16.0);

    imageStore(aerial_perspective, ivec3(gl_GlobalInvocationID.xy, slot), output_value);
}
