#version 450 core
#include "declarations.glsl"
#include "hash.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, std140) readonly buffer Nodes {
	Node nodes[];
};
layout(binding = 1) uniform UniformBlock {
	int slot;
} ubo;

layout(binding = 2) uniform texture2DArray treecover;
layout(binding = 3) uniform sampler linear;
layout(binding = 4) uniform texture2DArray heightmaps;
layout(binding = 5) uniform texture2DArray waterlevel;

layout(rgba8, binding = 6) writeonly uniform image2DArray tree_attributes;

void main() {
	Node node = nodes[ubo.slot];

	vec2 texcoord = vec2(gl_GlobalInvocationID.xy-1.5) / vec2(512);
	vec3 texcoord3 = layer_texcoord(node.layers[TREECOVER_LAYER], texcoord);
	float coverage = textureLod(sampler2DArray(treecover, linear), texcoord3, 0).r;

	float height = extract_height(textureLod(sampler2DArray(heightmaps, linear), layer_texcoord(node.layers[HEIGHTMAPS_LAYER], texcoord), 0).x);
    float water_surface = extract_height(textureLod(sampler2DArray(waterlevel, linear), layer_texcoord(node.layers[WATERLEVEL_LAYER], texcoord),0).x);

    vec4 output_value = vec4(0);
    if (random(gl_GlobalInvocationID.xy) < coverage && height > water_surface) {
        float x = random(uvec3(gl_GlobalInvocationID.xy, 1));
        float y = random(uvec3(gl_GlobalInvocationID.xy, 2));
        float seed = random(uvec3(gl_GlobalInvocationID.xy, 3));
        output_value = vec4(x, y, seed, 1 / 255.0);
    }

	imageStore(tree_attributes, ivec3(gl_GlobalInvocationID.xy, ubo.slot - TREE_ATTRIBUTES_BASE_SLOT), output_value);
}
